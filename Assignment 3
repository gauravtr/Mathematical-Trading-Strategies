{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  50 of 50 completed\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import itertools\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "sp500_tickers = [\n",
    "    'AAPL', 'MSFT', 'AMZN', 'GOOGL', 'META', 'TSLA', 'NVDA', 'JNJ', 'JPM', 'V', \n",
    "    'PG', 'UNH', 'HD', 'DIS', 'PYPL', 'MA', 'NFLX', 'INTC', 'VZ', 'ADBE', \n",
    "    'CMCSA', 'PFE', 'KO', 'PEP', 'T', 'MRK', 'CSCO', 'XOM', 'ABT', 'CRM', \n",
    "    'CVX', 'MCD', 'ACN', 'MDT', 'NKE', 'LLY', 'WMT', 'BA', 'MMM', 'TMO', \n",
    "    'ORCL', 'IBM', 'AVGO', 'HON', 'TXN', 'DHR', 'QCOM', 'PM', 'NEE', 'UPS'\n",
    "]\n",
    "\n",
    "data = yf.download(sp500_tickers, start=\"2020-01-01\", end=\"2021-01-01\")\n",
    "data = data['Adj Close']\n",
    "data = data.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_macd(data, short_window, long_window, signal_window):\n",
    "    ema_short = data.ewm(span=short_window, adjust=False).mean()\n",
    "    ema_long = data.ewm(span=long_window, adjust=False).mean()\n",
    "    macd_line = ema_short - ema_long\n",
    "    signal_line = macd_line.ewm(span=signal_window, adjust=False).mean()\n",
    "    macd_histogram = macd_line - signal_line\n",
    "    return macd_line, signal_line, macd_histogram\n",
    "\n",
    "def backtest_macd(data, short_window, long_window, signal_window):\n",
    "    macd_line, signal_line, _ = calculate_macd(data, short_window, long_window, signal_window)\n",
    "    \n",
    "    # Generate trading signals: 1 for buy, -1 for sell\n",
    "    Signal = pd.Series(index=data.index)\n",
    "    Signal[:] = 0  # Initialize Signal series with zeros\n",
    "    Signal[macd_line > signal_line] = 1\n",
    "    Signal[macd_line < signal_line] = -1\n",
    "\n",
    "    initial_capital = 100000\n",
    "    capital = initial_capital\n",
    "    shares_owned = 0\n",
    "    for i in range(len(data)):\n",
    "        # Buy signal\n",
    "        if Signal.iloc[i] == 1 and capital > 0:\n",
    "            shares_to_buy = capital // data.iloc[i]\n",
    "            capital -= shares_to_buy * data.iloc[i]\n",
    "            shares_owned += shares_to_buy\n",
    "        \n",
    "        # Sell signal\n",
    "        elif Signal.iloc[i] == -1 and shares_owned > 0:\n",
    "            capital += shares_owned * data.iloc[i]\n",
    "            shares_owned = 0  \n",
    "\n",
    "    # Calculate the value of any remaining shares plus capital\n",
    "    final_value = capital + (shares_owned * data.iloc[-1])\n",
    "    # Calculate the cumulative return\n",
    "    performance = (final_value - initial_capital) / initial_capital\n",
    "    return performance\n",
    "\n",
    "def optimize_macd(data, short_window_range, long_window_range, signal_window_range):\n",
    "    best_performance = -np.inf\n",
    "    best_params = None\n",
    "\n",
    "    for short_window, long_window, signal_window in itertools.product(short_window_range, long_window_range, signal_window_range):\n",
    "        if short_window >= long_window:\n",
    "            continue  # Ensure short_window < long_window\n",
    "        performance = backtest_macd(data, short_window, long_window, signal_window)\n",
    "        if performance > best_performance:\n",
    "            best_performance = performance\n",
    "            best_params = (short_window, long_window, signal_window)\n",
    "    \n",
    "    return best_params, best_performance\n",
    "\n",
    "def buy_hold_returns(data):\n",
    "    return (data.iloc[-1] - data.iloc[0]) / data.iloc[0]\n",
    "\n",
    "# Define the ranges for the parameters\n",
    "short_window_range = range(2, 20)\n",
    "long_window_range = range(5, 50)\n",
    "signal_window_range = range(2, 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ticker: AAPL\n",
      "Best Parameters: Short Window=9, Long Window=39, Signal Window=15\n",
      "Best Performance: 88.0970064086914 %\n",
      "Buy and Hold Performance: 78.23990486740979 %\n",
      " \n",
      "Ticker: MSFT\n",
      "Best Parameters: Short Window=4, Long Window=40, Signal Window=7\n",
      "Best Performance: 34.65832476806641 %\n",
      "Buy and Hold Performance: 39.942839785171785 %\n",
      " \n",
      "Ticker: AMZN\n",
      "Best Parameters: Short Window=4, Long Window=11, Signal Window=14\n",
      "Best Performance: 72.60895497131348 %\n",
      "Buy and Hold Performance: 71.59709483183182 %\n",
      " \n",
      "Ticker: GOOGL\n",
      "Best Parameters: Short Window=11, Long Window=20, Signal Window=17\n",
      "Best Performance: 57.28727855682373 %\n",
      "Buy and Hold Performance: 28.053323969713485 %\n",
      " \n",
      "Ticker: META\n",
      "Best Parameters: Short Window=8, Long Window=37, Signal Window=9\n",
      "Best Performance: 44.47529431152344 %\n",
      "Buy and Hold Performance: 30.21260721979413 %\n",
      " \n",
      "Ticker: TSLA\n",
      "Best Parameters: Short Window=2, Long Window=33, Signal Window=2\n",
      "Best Performance: 623.1093198680877 %\n",
      "Buy and Hold Performance: 720.0506467423962 %\n",
      " \n",
      "Ticker: NVDA\n",
      "Best Parameters: Short Window=3, Long Window=6, Signal Window=13\n",
      "Best Performance: 77.4241744799614 %\n",
      "Buy and Hold Performance: 118.0241476111656 %\n",
      " \n",
      "Ticker: JNJ\n",
      "Best Parameters: Short Window=6, Long Window=26, Signal Window=10\n",
      "Best Performance: 36.15720923614502 %\n",
      "Buy and Hold Performance: 10.747799133723332 %\n",
      " \n",
      "Ticker: JPM\n",
      "Best Parameters: Short Window=9, Long Window=13, Signal Window=16\n",
      "Best Performance: 24.274334693908692 %\n",
      "Buy and Hold Performance: -6.666301507610088 %\n",
      " \n",
      "Ticker: V\n",
      "Best Parameters: Short Window=5, Long Window=17, Signal Window=19\n",
      "Best Performance: 29.130978744506837 %\n",
      "Buy and Hold Performance: 15.150869537062531 %\n",
      " \n",
      "Ticker: PG\n",
      "Best Parameters: Short Window=11, Long Window=38, Signal Window=16\n",
      "Best Performance: 23.861406799316406 %\n",
      "Buy and Hold Performance: 15.530719020836504 %\n",
      " \n",
      "Ticker: UNH\n",
      "Best Parameters: Short Window=4, Long Window=5, Signal Window=6\n",
      "Best Performance: 63.67018893432618 %\n",
      "Buy and Hold Performance: 21.8636723163338 %\n",
      " \n",
      "Ticker: HD\n",
      "Best Parameters: Short Window=10, Long Window=41, Signal Window=18\n",
      "Best Performance: 54.09789294433593 %\n",
      "Buy and Hold Performance: 23.77618709551503 %\n",
      " \n",
      "Ticker: DIS\n",
      "Best Parameters: Short Window=19, Long Window=35, Signal Window=19\n",
      "Best Performance: 63.52994820404053 %\n",
      "Buy and Hold Performance: 22.253704614791353 %\n",
      " \n",
      "Ticker: PYPL\n",
      "Best Parameters: Short Window=2, Long Window=25, Signal Window=18\n",
      "Best Performance: 89.21750311279297 %\n",
      "Buy and Hold Performance: 111.4672658674873 %\n",
      " \n",
      "Ticker: MA\n",
      "Best Parameters: Short Window=7, Long Window=16, Signal Window=19\n",
      "Best Performance: 44.994710525512694 %\n",
      "Buy and Hold Performance: 18.284857042150797 %\n",
      " \n",
      "Ticker: NFLX\n",
      "Best Parameters: Short Window=6, Long Window=8, Signal Window=18\n",
      "Best Performance: 53.43867489624024 %\n",
      "Buy and Hold Performance: 63.95196763939346 %\n",
      " \n",
      "Ticker: INTC\n",
      "Best Parameters: Short Window=8, Long Window=10, Signal Window=17\n",
      "Best Performance: 24.429120365142822 %\n",
      "Buy and Hold Performance: -16.076941642668345 %\n",
      " \n",
      "Ticker: VZ\n",
      "Best Parameters: Short Window=12, Long Window=13, Signal Window=13\n",
      "Best Performance: 14.347151874542236 %\n",
      "Buy and Hold Performance: 0.44164463574686297 %\n",
      " \n",
      "Ticker: ADBE\n",
      "Best Parameters: Short Window=13, Long Window=22, Signal Window=19\n",
      "Best Performance: 57.09188061523438 %\n",
      "Buy and Hold Performance: 49.54400205427663 %\n",
      " \n",
      "Ticker: CMCSA\n",
      "Best Parameters: Short Window=5, Long Window=29, Signal Window=6\n",
      "Best Performance: 33.00376828002929 %\n",
      "Buy and Hold Performance: 18.084097217495216 %\n",
      " \n",
      "Ticker: PFE\n",
      "Best Parameters: Short Window=4, Long Window=12, Signal Window=19\n",
      "Best Performance: 37.345226352691654 %\n",
      "Buy and Hold Performance: 3.1748109698348697 %\n",
      " \n",
      "Ticker: KO\n",
      "Best Parameters: Short Window=3, Long Window=21, Signal Window=3\n",
      "Best Performance: 53.06528679656982 %\n",
      "Buy and Hold Performance: 3.1399446845068715 %\n",
      " \n",
      "Ticker: PEP\n",
      "Best Parameters: Short Window=4, Long Window=9, Signal Window=11\n",
      "Best Performance: 16.566988761901854 %\n",
      "Buy and Hold Performance: 12.37057823117312 %\n",
      " \n",
      "Ticker: T\n",
      "Best Parameters: Short Window=3, Long Window=5, Signal Window=3\n",
      "Best Performance: 5.862835179328918 %\n",
      "Buy and Hold Performance: -19.194529392468255 %\n",
      " \n",
      "Ticker: MRK\n",
      "Best Parameters: Short Window=2, Long Window=40, Signal Window=3\n",
      "Best Performance: 21.304702308654786 %\n",
      "Buy and Hold Performance: -8.303760414208769 %\n",
      " \n",
      "Ticker: CSCO\n",
      "Best Parameters: Short Window=5, Long Window=34, Signal Window=6\n",
      "Best Performance: 10.884677772521972 %\n",
      "Buy and Hold Performance: -5.100999216691901 %\n",
      " \n",
      "Ticker: XOM\n",
      "Best Parameters: Short Window=15, Long Window=37, Signal Window=19\n",
      "Best Performance: 50.92840092086792 %\n",
      "Buy and Hold Performance: -37.218705017041025 %\n",
      " \n",
      "Ticker: ABT\n",
      "Best Parameters: Short Window=7, Long Window=23, Signal Window=19\n",
      "Best Performance: 28.684611999511716 %\n",
      "Buy and Hold Performance: 27.908204560312335 %\n",
      " \n",
      "Ticker: CRM\n",
      "Best Parameters: Short Window=3, Long Window=6, Signal Window=8\n",
      "Best Performance: 59.6673777923584 %\n",
      "Buy and Hold Performance: 33.25948287451021 %\n",
      " \n",
      "Ticker: CVX\n",
      "Best Parameters: Short Window=15, Long Window=31, Signal Window=19\n",
      "Best Performance: 36.221517429351806 %\n",
      "Buy and Hold Performance: -26.51313588503551 %\n",
      " \n",
      "Ticker: MCD\n",
      "Best Parameters: Short Window=4, Long Window=11, Signal Window=18\n",
      "Best Performance: 36.06026298522949 %\n",
      "Buy and Hold Performance: 9.534137061583705 %\n",
      " \n",
      "Ticker: ACN\n",
      "Best Parameters: Short Window=19, Long Window=49, Signal Window=19\n",
      "Best Performance: 38.48774142456055 %\n",
      "Buy and Hold Performance: 26.292301648246486 %\n",
      " \n",
      "Ticker: MDT\n",
      "Best Parameters: Short Window=7, Long Window=14, Signal Window=7\n",
      "Best Performance: 38.55211964416504 %\n",
      "Buy and Hold Performance: 4.674323230491402 %\n",
      " \n",
      "Ticker: NKE\n",
      "Best Parameters: Short Window=5, Long Window=13, Signal Window=16\n",
      "Best Performance: 53.91917269134522 %\n",
      "Buy and Hold Performance: 39.74383052777584 %\n",
      " \n",
      "Ticker: LLY\n",
      "Best Parameters: Short Window=16, Long Window=39, Signal Window=19\n",
      "Best Performance: 33.821203353881835 %\n",
      "Buy and Hold Performance: 30.266757208874996 %\n",
      " \n",
      "Ticker: WMT\n",
      "Best Parameters: Short Window=3, Long Window=23, Signal Window=6\n",
      "Best Performance: 24.263864570617677 %\n",
      "Buy and Hold Performance: 23.21869341218665 %\n",
      " \n",
      "Ticker: BA\n",
      "Best Parameters: Short Window=2, Long Window=6, Signal Window=7\n",
      "Best Performance: 87.87245517730713 %\n",
      "Buy and Hold Performance: -35.39733809311977 %\n",
      " \n",
      "Ticker: MMM\n",
      "Best Parameters: Short Window=3, Long Window=9, Signal Window=3\n",
      "Best Performance: 11.024437011718751 %\n",
      "Buy and Hold Performance: 0.7213039961256744 %\n",
      " \n",
      "Ticker: TMO\n",
      "Best Parameters: Short Window=12, Long Window=33, Signal Window=19\n",
      "Best Performance: 36.90518173217773 %\n",
      "Buy and Hold Performance: 43.0590383341382 %\n",
      " \n",
      "Ticker: ORCL\n",
      "Best Parameters: Short Window=7, Long Window=9, Signal Window=16\n",
      "Best Performance: 20.902949466705323 %\n",
      "Buy and Hold Performance: 22.01687530920208 %\n",
      " \n",
      "Ticker: IBM\n",
      "Best Parameters: Short Window=3, Long Window=9, Signal Window=9\n",
      "Best Performance: 41.63687705993652 %\n",
      "Buy and Hold Performance: -2.169813811686796 %\n",
      " \n",
      "Ticker: AVGO\n",
      "Best Parameters: Short Window=12, Long Window=47, Signal Window=15\n",
      "Best Performance: 62.81199060058594 %\n",
      "Buy and Hold Performance: 42.0174049115007 %\n",
      " \n",
      "Ticker: HON\n",
      "Best Parameters: Short Window=3, Long Window=6, Signal Window=13\n",
      "Best Performance: 50.59337594604493 %\n",
      "Buy and Hold Performance: 20.394798090149234 %\n",
      " \n",
      "Ticker: TXN\n",
      "Best Parameters: Short Window=3, Long Window=42, Signal Window=13\n",
      "Best Performance: 28.900416679382325 %\n",
      "Buy and Hold Performance: 30.400211069810002 %\n",
      " \n",
      "Ticker: DHR\n",
      "Best Parameters: Short Window=15, Long Window=49, Signal Window=18\n",
      "Best Performance: 54.191100158691405 %\n",
      "Buy and Hold Performance: 43.80913645819792 %\n",
      " \n",
      "Ticker: QCOM\n",
      "Best Parameters: Short Window=12, Long Window=46, Signal Window=19\n",
      "Best Performance: 46.36044641876221 %\n",
      "Buy and Hold Performance: 76.16471672548751 %\n",
      " \n",
      "Ticker: PM\n",
      "Best Parameters: Short Window=3, Long Window=5, Signal Window=10\n",
      "Best Performance: 49.68090711593628 %\n",
      "Buy and Hold Performance: 3.568702393080122 %\n",
      " \n",
      "Ticker: NEE\n",
      "Best Parameters: Short Window=6, Long Window=7, Signal Window=11\n",
      "Best Performance: 52.76656011199952 %\n",
      "Buy and Hold Performance: 31.993859003538994 %\n",
      " \n",
      "Ticker: UPS\n",
      "Best Parameters: Short Window=7, Long Window=47, Signal Window=19\n",
      "Best Performance: 52.25394573974609 %\n",
      "Buy and Hold Performance: 48.98683781256447 %\n",
      " \n",
      "Number of stocks with MACD strategy outperforming buy and hold: 41\n"
     ]
    }
   ],
   "source": [
    "count = 0\n",
    "for ticker in sp500_tickers:\n",
    "    if ticker in data.columns:\n",
    "        stock_data = data[ticker]\n",
    "        best_params, best_performance = optimize_macd(stock_data, short_window_range, long_window_range, signal_window_range)\n",
    "        print(f'Ticker: {ticker}')\n",
    "        print(f'Best Parameters: Short Window={best_params[0]}, Long Window={best_params[1]}, Signal Window={best_params[2]}')\n",
    "        print(f'Best Performance: {best_performance * 100} %')\n",
    "        print(f'Buy and Hold Performance: {buy_hold_returns(stock_data) * 100} %\\n ')\n",
    "        if best_performance > buy_hold_returns(stock_data):\n",
    "            count += 1\n",
    "    else:\n",
    "        print(f'Stock data not available for ticker: {ticker}')\n",
    "    \n",
    "print(f'Number of stocks with MACD strategy outperforming buy and hold: {count}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
